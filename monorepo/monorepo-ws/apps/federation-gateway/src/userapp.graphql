directive @key(fields: _FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @extends on OBJECT | INTERFACE

directive @external(reason: String) on OBJECT | FIELD_DEFINITION

type User
  @key(fields: "id")
{
  id: ID!
  name: String!
  age: Int!
  married: Boolean!
  friends: [User!]!
}

type Query {
  users: [User]
  getAllUsers: [User!]!
  getUserByName(name: String!): User
  getUserByNameOrAge(name: String, age: Int): [User]!
  getUserById(id: Int): User!
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}

type Mutation {
  createUser(name: String!, age: Int!, married: Boolean!): User!
  createFriendShip(friendOf: Int!, friendWith: Int!): User!
}

scalar _FieldSet

scalar _Any

type _Service {
  sdl: String
}

union _Entity = User
