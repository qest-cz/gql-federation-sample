
schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Article {
  authorId: ID!
  id: ID!
  title: String!
}

type Mutation {
  createArticle(authorId: ID!, title: String!): Article! @join__field(graph: ARTICLES)
  createFriendShip(friendOf: Int!, friendWith: Int!): User! @join__field(graph: USERS)
  createUser(age: Int!, married: Boolean!, name: String!): User! @join__field(graph: USERS)
}

type Query {
  articles: [Article] @join__field(graph: ARTICLES)
  getAllArticles: [Article!]! @join__field(graph: ARTICLES)
  getAllUsers: [User!]! @join__field(graph: USERS)
  getUserById(id: Int): User! @join__field(graph: USERS)
  getUserByName(name: String!): User @join__field(graph: USERS)
  getUserByNameOrAge(age: Int, name: String): [User]! @join__field(graph: USERS)
  users: [User] @join__field(graph: USERS)
}

type User
  @join__owner(graph: USERS)
  @join__type(graph: USERS, key: "id")
  @join__type(graph: ARTICLES, key: "id")
{
  age: Int! @join__field(graph: USERS)
  articles: [Article] @join__field(graph: ARTICLES)
  friends: [User!]! @join__field(graph: USERS)
  id: ID! @join__field(graph: USERS)
  married: Boolean! @join__field(graph: USERS)
  name: String! @join__field(graph: USERS)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  ARTICLES @join__graph(name: "articles" url: "http://localhost:9000/graphql")
  USERS @join__graph(name: "users" url: "http://localhost:8080/graphql")
}
